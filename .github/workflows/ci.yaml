name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  python-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy

      - name: Black (check)
        run: black --check --diff .

      - name: Flake8 (lint)
        run: flake8 . --max-line-length=88 --extend-ignore=E203,W503

      - name: isort (check)
        run: isort --check-only --diff --profile=black .

      - name: mypy (types)
        run: |
          mypy --install-types --non-interactive --ignore-missing-imports .

  cpp-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install build tools
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake clang-format

      - name: clang-format (check)
        shell: bash
        run: |
          set -euo pipefail
          files="$(git ls-files '*.c' '*.cpp' '*.h' '*.hpp' '*.cu' '*.cuh' || true)"
          if [ -n "$files" ]; then
            # Use style from .clang-format if present; otherwise defaults apply
            echo "$files" | xargs -r clang-format --dry-run -Werror
          else
            echo "No C/C++/CUDA files to format."
          fi

      - name: C/C++/CUDA syntax
        shell: bash
        run: |
          set -euo pipefail
          fail=0
          while IFS= read -r f; do
            case "$f" in
              *.c)
                echo "C syntax check: $f"
                if ! gcc -fsyntax-only -std=c17 -Wall -Wextra -I. "$f"; then
                  echo "::error file=$f::C syntax check failed"
                  fail=1
                fi
                ;;
              *.cc|*.cxx|*.cpp)
                echo "C++ syntax check: $f"
                if ! g++ -fsyntax-only -std=c++20 -Wall -Wextra -I. "$f"; then
                  echo "::error file=$f::C++ syntax check failed"
                  fail=1
                fi
                ;;
              *.cu)
                if command -v nvcc >/dev/null 2>&1; then
                  echo "CUDA syntax check: $f"
                  # Compile to object only; fails fast on syntax
                  if ! nvcc -std=c++17 -c "$f" -o /dev/null; then
                    echo "::error file=$f::CUDA syntax check failed"
                    fail=1
                  fi
                else
                  echo "Skipping CUDA syntax for $f (nvcc not available)"
                fi
                ;;
            esac
          done < <(git ls-files '*.c' '*.cc' '*.cxx' '*.cpp' '*.cu' || true)

          exit $fail

  shell-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install shellcheck
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: ShellCheck
        shell: bash
        run: |
          set -euo pipefail
          files="$(git ls-files '*.sh' '*.bash' '*.zsh' || true)"
          if [ -z "$files" ]; then
            echo "No shell scripts found."
            exit 0
          fi
          # SC1071: zsh not supported; SC1090/1091: non-constant sourced files
          echo "$files" | xargs -r shellcheck --severity=warning -e SC1071,SC1090,SC1091
